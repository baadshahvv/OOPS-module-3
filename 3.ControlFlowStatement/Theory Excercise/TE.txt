1. Conditional statements in C++ are used to make decisions in a program based on conditions.

   * `if-else` statement executes a block of code if a condition is true, and another block if it is false. Example:

     
     int num = 10;
     if(num > 0)
         cout << "Positive";
     else
         cout << "Non-positive";
     
   * `switch` statement allows multi-way branching based on the value of an expression. Example:

     
     int day = 3;
     switch(day) {
         case 1: cout << "Monday"; break;
         case 2: cout << "Tuesday"; break;
         case 3: cout << "Wednesday"; break;
         default: cout << "Other day";
     }
     

2. Difference between `for`, `while`, and `do-while` loops:

   * `for` loop: used when the number of iterations is known. Syntax includes initialization, condition, and increment/decrement. Example:

     
     for(int i = 1; i <= 5; i++)
         cout << i << " ";
     
   * `while` loop: used when the number of iterations is unknown; the condition is checked before executing the loop body. Example:

     
     int i = 1;
     while(i <= 5) {
         cout << i << " ";
         i++;
     }
     
   * `do-while` loop: executes the loop body at least once because the condition is checked after execution. Example:

     
     int i = 1;
     do {
         cout << i << " ";
         i++;
     } while(i <= 5);
     

3. `break` and `continue` statements control loop execution:

   * `break` exits the loop immediately. Example:

     
     for(int i = 1; i <= 5; i++) {
         if(i == 3) break;
         cout << i << " ";
     } // Output: 1 2
     
   * `continue` skips the current iteration and moves to the next iteration. Example:

     
     for(int i = 1; i <= 5; i++) {
         if(i == 3) continue;
         cout << i << " ";
     } // Output: 1 2 4 5
     

4. Nested control structures are loops or conditional statements placed inside another loop or conditional. Example:

   
   for(int i = 1; i <= 3; i++) {
       for(int j = 1; j <= 2; j++) {
           cout << "i=" << i << ", j=" << j << endl;
       }
   }
   

   This prints all combinations of `i` and `j` for the given ranges.

